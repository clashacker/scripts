local HttpService = game:GetService("HttpService")
local Workspace = game:GetService("Workspace")
local Players = game:GetService("Players")
local Lighting = game:GetService("Lighting")
local TestService = game:GetService("TestService")
local CoreGui = game:GetService("CoreGui")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local UserInputService = game:GetService("UserInputService")
local Client = Players.LocalPlayer
local Mouse = Client:GetMouse()

Mapname = game:GetService("MarketplaceService"):GetProductInfo(game.PlaceId).Name
local Namelength = 20
if string.sub(Mapname, 1, 4) == "Xbox" then
	Namelength = Namelength + 5
end
Mapname = string.sub(Mapname, Namelength)

ServerID = require(ReplicatedStorage.Node).Remote.GetServer:InvokeServer()

R = game.Workspace.Remote
local metaCall = getrawmetatable(getrenv().shared)
local RemoteCall = debug.getupvalues(debug.getupvalues(metaCall.__index)[3])
Serial = RemoteCall[6]
GetKey = RemoteCall[7]
function fireServer(Re, ...)
Re = R[tostring(Re)]
Re:FireServer(Serial({...}, GetKey()))
end

Neptunium = game:GetObjects("rbxassetid://6257801379")[1]
Neptunium.Parent = CoreGui
Main = Neptunium.Main
Drag = Main.Drag
Console = Main.Screens.Console
Type = Console.Type
Commands = Console.Outer.Commands
ConsoleListLayout = Commands.UIListLayout

Main.Tabs.Logs:Destroy()

Moderators = {}
local Nonmods = {["ws"] = true, ["jp"] = true, ["nofall"] = true, ["nofog"] = true, ["spec"] = true, ["oneshot"] = true, ["mod"] = true, ["unmod"] = true, ["setprefix"] = true, ["getbans"] = true,}

checkpermission = function(Player)
	for _, v in pairs(Moderators) do
		if v:lower() == Player:lower() then
			return true
		end
	end
end

Players.PlayerRemoving:Connect(function(Player)
	if table.find(Moderators, Player.Name) then
		table.remove(Moderators, table.find(Moderators, Player.Name)) 
	end
end)

local function AdaptUI(Scroll, Layout)
	Scroll.CanvasSize = UDim2.new(0, 0, 0, Layout.AbsoluteContentSize.Y + 10)
end

function messagebox(Title, Message, ButtonsType)
	Neptunium.MessageBox.Visible = true
	Neptunium.MessageBox.Title.Text = Title
	Neptunium.MessageBox.Message.Text = Message
	Neptunium.MessageBox.Buttons[ButtonsType].Visible = true
end

function FindLastChild(Instance, Item)
    local Last;
    for i, v in pairs(Instance:GetChildren()) do
        if tostring(v) == Item then
            Last = v
        end
    end
    return Last
end

local meta = getrawmetatable(game)
local nc = meta.__namecall 
setreadonly(meta, false)
meta.__namecall = newcclosure(function(rc, ...)
    if getnamecallmethod() == "FindLastChild" then
        return FindLastChild(rc, ...)
    end
    return nc(rc, ...)
end)

function GetLastItem(Item)
    Children = Item:GetChildren()
	LastChild = Children[#Children].Name
    return LastChild
end    

function SizeHandler(Instance, Reply, Message)
	if Instance[Reply .. "Reply"].TextFits == false then	
		repeat Instance[Reply .. "Reply"].Size = UDim2.new(0, 346, 0, Instance[Reply .. "Reply"].Size.Y.Offset + 18) until Instance[Reply .. "Reply"].TextFits == true
		Instance.Size = UDim2.new(0, 346, 0, Instance[Reply .. "Reply"].Size.Y.Offset + 18)
	end
end

local function success(Message)
	LastMessage = GetLastItem(Commands)
	LastSuccess = Commands:FindLastChild("Success")
	if LastMessage == "Success" then 
		OldMessage = LastSuccess.SuccessReply.Text
		LastSuccess.SuccessReply.Text = tostring(OldMessage) .. "\n" .. tostring(Message)
		SizeHandler(LastSuccess, "Success", Message)
	else
		local SuccessMessage = game:GetObjects("rbxassetid://6243604479")[1]
		SuccessMessage.Parent = Commands
		SuccessMessage.Visible = true  
		SuccessMessage.SuccessReply.Text = Message
		SizeHandler(SuccessMessage, "Success", Message)
    end
end

local function error(Message)
    LastMessage = GetLastItem(Commands)
    LastError = Commands:FindLastChild("Error")
    if LastMessage == "Error" then 
        OldMessage = LastError.ErrorReply.Text
		LastError.ErrorReply.Text = tostring(OldMessage) .. "\n" .. tostring(Message)
		SizeHandler(LastError, "Error", Message)
    else
		local ErrorMessage = game:GetObjects("rbxassetid://6243606341")[1] 
		ErrorMessage.Parent = Commands
		ErrorMessage.Visible = true  
		ErrorMessage.ErrorReply.Text = Message
		SizeHandler(ErrorMessage, "Error", Message)
    end
end

success("Made by: Scarz#9278, " .. string.gsub(Mapname .. ":" .. ServerID, "Server ID:", ""))

function checkargs(Content, Args)
	if not Args then
		error(Content .. " is either nil or invalid")
		return true
	end   
end

function noclient(Player)
	if Player == Client.Name then 
		error("This command does not apply on client")
		return true
	end
end

function notloaded(Player)
	if not Workspace:FindFirstChild(Player) then
		error(Player .. " is either not loaded in or punished")
		return true
	end 
end

function notspawned(Player)
	if not Players[Player].Character.IsSpawned.Value == true then
		error(Player .. " is not spawned in")
		return true
	end 
end

function checkweapon(Weapon, Player)
	if not Players[Player].Character:FindFirstChild("IsSpawned") or not Players:FindFirstChild(Player) or not Players[Player]:FindFirstChild("Backpack") then
		error("Error with " .. Player .. " possible instance missing: " .. Player .. " is nil / " .. Player ..  ".Backpack is nil / " .. Player .. ".Character.IsSpawned is nil")
		return true
	end
	if notspawned(Player) then return true end
	local Weaponfound = false
	for _, v in pairs(Players[Player].Backpack:GetChildren()) do
		if v.Name == Weapon then
			Weaponfound = true
		end
	end
	if not Weaponfound then
		error(Player .. " is missing " .. Weapon)
		return true 
	end
end

function checkgroup(Player)
	local GroupFound = false
	repeat wait() until Lighting.Groups ~= nil 
	for _, v in pairs(Lighting.Groups:GetDescendants()) do 
		if v:IsA("StringValue") and v.Value == Player then
			GroupFound = true
		end
	end
	if GroupFound == false then 
		error(Player .. " is not in a group")
		return true
	end
end

function getgroup(Player)
	repeat wait() until Lighting.Groups ~= nil 
	for _, v in pairs(Lighting.Groups:GetDescendants()) do 
		if v:IsA("StringValue") and v.Value == Player then 
			return tostring(v.Parent)
		end
	end
end

function setvalue(Value, Min, Max, Clamp)
    if not Clamp then 
        Value = math.clamp(Value, Min, Max)
        return Value
    end
    Value = math.floor(Value + Clamp)
	Value = math.clamp(Value, Min, Max)
	return Value
end

local function GetPlayer(str)
	if str == nil or str == "" then return end
	for _, Player in pairs(Players:GetPlayers()) do 
		if Player.Name:lower() == str:lower() then
			return Player.Name
		end
	end
	for _, Player in pairs(Players:GetPlayers()) do
		if Player.Name:lower():sub(1, #str) == str:lower() then
			return Player.Name
		end
	end
	return 
end

local function GetVehicles(str)
	if str == nil or str == "" then return end
	for _, Vehicles in pairs(Workspace.Vehicles:GetChildren()) do 
		if Vehicles.Name:lower() == str:lower() then
			return Vehicles.Name
		end
	end
	for _, Vehicles in pairs(Workspace.Vehicles:GetChildren()) do
		if Vehicles.Name:lower():sub(1, #str) == str:lower() then
			return Vehicles.Name
		end
	end
	return 
end

local SpacedItems = {
	["M1 Garand"] = "M1Garand",
	["Model 29"]  = "Model29",
	["Mk 48"] = "Mk48",
	["Mk 17"] = "Mk17",
	["Mk 23"] = "Mk23",
	["Model 459"] = "Model459"
}
local function GetItemName(str)
	if str == nil or str == "" then return end
	for _, Item in pairs(Lighting.LootDrops:GetChildren()) do
		local Original = Item.Name
		if SpacedItems[Item.Name] then
			Item = SpacedItems[Item.Name]
		else
			Item = Item.Name
		end
		if Item:lower() == str:lower() then
			return Original
		end
	end
	for _, Item in pairs(Lighting.LootDrops:GetChildren()) do
		local Original = Item.Name
		if SpacedItems[Item.Name] then
			Item = SpacedItems[Item.Name]
		else
			Item = Item.Name
		end
		if Item:lower():sub(1, #str) == str:lower() then
			return Original
		end
	end
	return 
end

local SpacedWeapons = {
	["M1 Garand"] = "M1Garand",
	["Instance 29"]  = "Instance29",
	["Mk 48"] = "Mk48",
	["Mk 17"] = "Mk17",
	["Mk 23"] = "Mk23",
	["Instance 459"] = "Instance459"
}
local function GetWeapon(str)
	if str == nil or str == "" then return end
	for _, Weapon in pairs(ReplicatedStorage.Weapons:GetChildren()) do
		local Original = Weapon.Name
		if SpacedWeapons[Weapon.Name] then
			Weapon = SpacedWeapons[Weapon.Name]
		else
			Weapon = Weapon.Name
		end
		if Weapon:lower() == str:lower() then
			return Original
		end
	end
	for _, Weapon in pairs(ReplicatedStorage.Weapons:GetChildren()) do
		local Original = Weapon.Name
		if SpacedWeapons[Weapon.Name] then
			Weapon = SpacedWeapons[Weapon.Name]
		else
			Weapon = Weapon.Name
		end
		if Weapon:lower():sub(1, #str) == str:lower() then
			return Original
		end
	end
	return 
end

local SpacedLocations = {
	["Military Airfield"] = "MilitaryAirfield",
	["Power Plant"]  = "PowerPlant",
	["Radio Tower"] = "RadioTower",
	["Fort Ruins"] = "FortRuins",
	["Trinity HQ"] = "TrinityHQ",
	["Car Dealership"] = "CarDealership",
	["Pitts Park"] = "PittsPark",
	["Windy Peak Campground"]  = "WindyPeakCampground",
	["Military Outpost"] = "MilitaryOutpost",
	["Bump Flatts"] = "BumpFlatts",
	["SW Airfield"] = "SWAirfield",
	["NE Airfield"] = "NEAirfield"
}
local function GetLocation(str)
	if str == nil or str == "" then return end
	for _, Location in pairs(Workspace.Locations:GetChildren()) do
		local Original = Location.Name
		if SpacedLocations[Location.Name] then
			Location = SpacedLocations[Location.Name]
		else
			Location = Location.Name
		end
		if Location:lower() == str:lower() then
			return Original
		end
	end
	for _, Location in pairs(Workspace.Locations:GetChildren()) do
		local Original = Location.Name
		if SpacedLocations[Location.Name] then
			Location = SpacedLocations[Location.Name]
		else
			Location = Location.Name
		end
		if Location:lower():sub(1, #str) == str:lower() then
			return Original
		end
	end
	return 
end

local function GetMaterials(str)
	if str == nil or str == "" then return end
	for _, Materials in pairs(Enum.Material:GetEnumItems()) do 
		if Materials.Name:lower() == str:lower() then
			return Materials.Name
		end
	end
	for _, Materials in pairs(Enum.Material:GetEnumItems()) do
		if Materials.Name:lower():sub(1, #str) == str:lower() then
			return Materials.Name
		end
	end
	return 
end

local AttachmentList = {
	["CCO"] = {"sight", 9001},
	["Holo"] = {"sight", 9002},
	["Reflex"] = {"sight", 9003},
	["Kobra"] = {"sight", 9004},
	["Grip"] = {"under", 9005},
	["Laser"] = {"under", 9006},
	["Suppressor9"] = {"silencer", 9007},
	["Suppressor45"] = {"silencer", 9008},
	["Suppressor556"] = {"silencer", 9009},
	["Suppressor762"] = {"silencer", 9010},
	["Suppressor545"] = {"silencer", 9011},
	["Flashlight"] = {"under", 9012},
	["Acog"] = {"sight", 9013},
	["SUSAT"] = {"sight", 9014}
}

local function GetAttachments(str)
	if str == nil or str == "" then return end
	for Attachment in pairs(AttachmentList) do 
		if Attachment:lower() == str:lower() then
			return Attachment
		end
	end
	for Attachment in pairs(AttachmentList) do
		if Attachment:lower():sub(1, #str) == str:lower() then
			return Attachment
		end
	end
	return 
end

function GetItemFromString(Item, Parent)
	if Parent:FindFirstChild(Item) then
		return Parent[Item]
	elseif  Lighting.Materials:FindFirstChild(Item) then
		return Lighting.Materials[Item]
	end
end

function GetPart(Model)
	local Part = nil
	for _, v in pairs(Model:GetDescendants()) do
		if v:IsA("BasePart") and (Part == nil or tostring(v) == "Head" or tostring(v) == "Driver") then
			Part = v
		end
	end
	return Part
end

local Amount = 0
MaxAmount = 1700
TimeToWait = 1.5
function Limiter()
	Amount = Amount + 1
	if Amount >= MaxAmount then
		wait(TimeToWait)
		Amount = 0
	end
end

SpawnedItems = {}
function Clone(Player, Item, Parent, Offset, Spawn)
	if Player == nil or Item == nil or GetItemFromString(Item, Parent) == nil then
		return
	end
	Item = GetItemFromString(Item, Parent)
	if Spawn == nil then
		Limiter()
	end
	if SpawnedItems[Item] == nil then
		SpawnedItems[Item] = {true}
	else
		table.insert(SpawnedItems[Item], true)
	end
	if Item.Parent ~=  Lighting.Materials then
		fireServer("ChangeParent", Parent:WaitForChild(tostring(Item)), Lighting.Materials)
	end
	local ItemWait = Lighting.Materials:WaitForChild(tostring(Item))
	if ItemWait.PrimaryPart == nil then
		ItemWait.PrimaryPart = GetPart(ItemWait)
	end
	pcall(function() Workspace.Remote.PlaceMaterial:FireServer(Lighting.Materials:WaitForChild(tostring(Item)).Name, Player.Character.Torso.Position - ItemWait.PrimaryPart.Position - Offset) end)
	spawn(function()
		wait(2)
		table.remove(SpawnedItems[Item], 1)
		if #SpawnedItems[Item] < 1 then
			fireServer("ChangeParent", Lighting.Materials:WaitForChild(tostring(Item)), Parent)
		end
	end)
end

function kickplayer(Player)
	spawn(function()
		Workspace.Remote.AddClothing:FireServer("PermanentBan", Players[Player] , "", "", "")
		wait(.5)
		fireServer("ChangeParent", Players[Player], nil)
	end)
end

function teleport(Player, Parameters)
	pcall(function()
		spawn(function()
			repeat wait() until Players[Player] ~= nil and Players[Player].Character ~= nil and Players[Player].Character.Torso ~= nil 
			Workspace.Remote.AddClothing:FireServer("driven", Players[Player].Character, "","","")
			Workspace.Remote.AddClothing:FireServer("IsBuildingMaterial", Players[Player].Character.Torso, "","","")
			Workspace.Remote.AddClothing:FireServer("SeatPoint", Players[Player].Character.Torso, "","","")
			repeat wait() until Players[Player].Character.Torso:FindFirstChild("IsBuildingMaterial") and Players[Player].Character.Torso:FindFirstChild("SeatPoint") and Players[Player].Character:FindFirstChild("driven")
			wait(.1)
			Workspace.Remote.HurtZombie:FireServer(Players[Player].Character)
			Workspace.Remote.ReplicatePart:FireServer(Players[Player].Character.Torso, Parameters) 
			wait(1.1)
			fireServer("ChangeParent", Players[Player].Character.Torso.IsBuildingMaterial, nil)
			fireServer("ChangeParent", Players[Player].Character.Torso.SeatPoint, nil)
			Players[Player].Character:WaitForChild("driven")
			fireServer("ChangeParent", Players[Player].Character.driven, nil)
		end)
	end)
end 

function colormodel(Instance, Color, Texture)
	spawn(function()
		if not Instance:FindFirstChild("SecondaryColor") then
			Workspace.Remote.AddClothing:FireServer("SecondaryColor", Instance, "", "", "")
			repeat wait() until Instance:FindFirstChild("SecondaryColor")
		end
		Workspace.Remote.ColorGun:FireServer(Instance, Color, Texture, Color, Texture)
		wait(.5)
		for _, v in pairs(Instance:GetChildren()) do
			if v.Name == "SecondaryColor" then 
				fireServer("ChangeParent", v, nil)
			end
		end
	end)
end

function repair(Vehicle, Boolean, Value, Fuel)
	if Boolean then 
		fireServer("WindowArmorSet", Vehicle.Essentials.Details:FindFirstChild("Windows") , "Ballistic")
		for _, v in pairs(Vehicle.Wheels:GetChildren()) do 
			fireServer("WheelVisibleSet", v, "Armored")
		end
		if Vehicle == "Firetruck" or Vehicle == "Ambulance" then
			fireServer("HullArmorSet", Vehicle:FindFirstChild("ArmorSkirt", true))
		else        
			fireServer("HullArmorSet", Vehicle:FindFirstChild("ArmorSkirt", true), Vehicle:FindFirstChild("Color", true), Vehicle:FindFirstChild("Special", true))
		end
	end
	fireServer("ChangeValue", Vehicle.Stats.Hull, Value)
	fireServer("ChangeValue", Vehicle.Stats.Hull.Max, Value)
	fireServer("ChangeValue", Vehicle.Stats.Engine, Value)
	fireServer("ChangeValue", Vehicle.Stats.Engine.Max, Value)
	fireServer("ChangeValue", Vehicle.Stats.Tank, Value)
	fireServer("ChangeValue", Vehicle.Stats.Tank.Max, Value)
	fireServer("ChangeValue", Vehicle.Stats.Armor, Value)
	fireServer("ChangeValue", Vehicle.Stats.Armor.Max, Value)
	fireServer("ChangeValue", Vehicle.Stats.Fuel, Fuel)
	fireServer("ChangeValue", Vehicle.Stats.Fuel.Max, Fuel)
end

function setoutfit(Player, Type, ID)
	spawn(function()
		local Instance = Players[Player].playerstats.character[string.lower(Type)]
		id = id or 0
		fireServer("ChangeValue", Instance.ObjectID[Type], ID)
		Workspace.Remote.AddClothing:FireServer("anything lol", Instance, "", "", "")
		wait()
		fireServer("ChangeParent", Instance:WaitForChild("anything lol"), nil)
	end)
end

ConsoleListLayout:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(function()
	AdaptUI(Commands, ConsoleListLayout)
end)

local function returnplayers(Mod, Phrase)
	local players = {}
	if Phrase == nil then 
		Phrase = GetPlayer(Phrase)
		if checkargs("Player", Phrase) then return players end
	end
	if Phrase:lower() == "me" then
		table.insert(players, Players[Mod])
	elseif Phrase:lower() == "random" then
		table.insert(players, Players:GetPlayers()[math.random(1, #Players:GetPlayers())])
	elseif Phrase:lower() == "others" then
		for _, v in pairs(Players:GetPlayers()) do
			if v ~= Players[Mod] then 
				table.insert(players, v)
			end
		end
	elseif Phrase:lower() == "all" then 
		for _, v in pairs(Players:GetPlayers()) do
			table.insert(players, v)
		end
	elseif Phrase:lower() == "team" then 
		local Groupfound = false
		repeat wait() until Lighting.Groups ~= nil 
		for _, v in pairs(Lighting.Groups:GetDescendants()) do 
			if v:IsA("StringValue") and v.Value == Players[Mod].Name then 
				Groupfound = true
			    for _, Group in pairs(v.Parent:GetChildren()) do
			        if Players:FindFirstChild(Group.Value) then 
						table.insert(players, Players[Group.Value])
			        end
			    end
			end
		end
	  	if Groupfound == false then
			error(Mod .. " is not in a group")
	  	end
	else
		Phrase = GetPlayer(Phrase)
		if checkargs("Player", Phrase) then return players end
		table.insert(players, Players[Phrase])
	end
	return players
end

local function returnvehicles(Mod, Phrase)
	local vehicles = {}
	if not Workspace:FindFirstChild("Vehicles") then 
		error("Vehicles is not a valid member of Workspace")
		return vehicles
	end
	if Phrase == nil then 
		Phrase = GetVehicles(Phrase)
		if checkargs("Vehicle", Phrase) then return vehicles end
	end
	if Phrase:lower() == "all" then 
		for _, v in pairs(Workspace.Vehicles:GetChildren()) do
			if v.Name ~= "VehicleWreck" then
				table.insert(vehicles, v)
			end
		end
	elseif Phrase:lower() == "current" or Phrase:lower() == "mine" then 
		local Seatfound = false
		for _, v in pairs(Workspace.Vehicles:GetDescendants()) do
			if v.Name ~= "VehicleWreck" and v:IsA("Weld") and v.Name == "SeatWeld" and v.Part1 ~= nil and v.Part1.Parent.Name == Players[Mod].Name then
				Seatfound = true
				if v.Parent.Parent.Parent.Name == "Seats" then
					table.insert(vehicles, v.Parent.Parent.Parent.Parent)
				else
					table.insert(vehicles, v.Parent.Parent.Parent)
				end
			end
		end
		if Seatfound == false then
			error(Mod .. " is not in a driver or passenger seat")
		end
	else
		Phrase = GetVehicles(Phrase)
		if checkargs("Vehicle", Phrase) then return vehicles end
		table.insert(vehicles, Workspace.Vehicles[Phrase])
	end
	return vehicles
end

local function GetArgs(Str)
	local Args = {}
	for Arg in string.gmatch(Str, "%S+") do
		table.insert(Args, Arg)
	end    
	return Args
end    

local CommandDictionary = {
--local
	["spec"] = {
		Callback = function(Mod, Player) 
		local Player = returnplayers(Mod, Player)[1]
		if Player == nil then return end
			Workspace.CurrentCamera.CameraSubject = Player.Character.Humanoid
			success(string.format("Spectated %s", Player.Name))
		end
	},

	["nofog"] = {
		Callback = function()
			Lighting.FogEnd = 9e9
			success("Removed fog")
		end 
	},

	["ws"] = {
		Callback = function(Mod, Value) 
		if Client.PlayerGui:FindFirstChild("SkyboxRenderMode") then
			Client.PlayerGui.SkyboxRenderMode.Parent = nil
		end
		if checkargs("Value", tonumber(Value)) then return end	
			getrenv()._G.walkbase = tonumber(setvalue(Value, 0, 9e9, .5))
			success(string.format("Set your walkspeed to %s", Value))
		end
	},

	["jp"] = {
		Callback = function(Mod,Value) 
		if checkargs("Value", tonumber(Value)) then return end	
			Client.Character.Humanoid.JumpPower = tonumber(setvalue(Value, 0, 9e9, .5))
			success(string.format("Set your jumppower to %s", Value))
		end
    },
	
	["nofall"] = {
		Callback = function() 
			if Client.PlayerGui.HitEqualsYouDie:FindFirstChild("JumpLimiter") then
				Client.PlayerGui.HitEqualsYouDie:FindFirstChild("JumpLimiter").Parent = nil
			end
			success("Disabled fall damage")
		end
	},

	["oneshot"] = {
		Callback = function(Mod, Weapon)
			Weapon = GetWeapon(Weapon)
			if checkargs("Weapon", Weapon) then return end
			if checkweapon(Weapon, Client.Name) then return end
			Instance = Client.Backpack[Weapon]
			local Oldname = Instance.Name
			Workspace.Remote.Detonate:FireServer(Instance)
			Client.Backpack:WaitForChild("C4Active")
			Instance.Name = Oldname
			fireServer("ChangeValue", Instance.Stats.Damage, getrenv()._G.Obfuscate(9e9))
			success(string.format("Set %s's damage to 9e9", Weapon))
		end 
	},

--player
	["tp"] = {
		Callback = function(Mod, Player, Player2)
		local Player2 = returnplayers(Mod, Player2)[1]
		if Player2 == nil then return end
		for _, Player in pairs(returnplayers(Mod, Player)) do 
			if Player == Player2 then 
					error(string.format("%s is there own player", Player.Name))
					continue
				end
				repeat wait() until Player2 ~= nil and Player2.Character ~= nil and Player2.Character.Torso ~= nil 
				teleport(Player.Name, Player2.Character.Torso.CFrame + Vector3.new(-3, 0, 0))
				success(string.format("Teleported %s to %s", Player.Name, Player2.Name))
			end
		end
	},

	["bring"] = {
		Callback = function(Mod, Player)
		for _, Player in pairs(returnplayers(Mod, Player)) do 
			if Player == Client then 
					error(string.format("%s is there own player", Player.Name))
					continue
				end
				repeat wait() until Client ~= nil and Client.Character ~= nil and Client.Character.Torso ~= nil 
				teleport(Player.Name, Client.Character.Torso.CFrame + Vector3.new(-3, 0, 0))
				success(string.format("Brought %s to you", Player.Name))
			end
		end
	},

	["loc"] = {
		Callback = function(Mod, Player, Location)
		for _, Player in pairs(returnplayers(Mod, Player)) do 
			Location = GetLocation(Location)
			if checkargs("Location", Location) then return end
				repeat wait() until Player ~= nil and Player.Character ~= nil and Player.Character.Torso ~= nil 
				teleport(Player.Name, Workspace.Locations[Location].CFrame + Vector3.new(0, 10, 0))
				success(string.format("Located %s to %s", Player.Name, Location))
			end
		end
	},

	["trip"] = {
		Callback = function(Mod, Player)
		for _, Player in pairs(returnplayers(Mod, Player)) do 
			if notloaded(Player.Name) then continue end
				Workspace.Remote.HurtZombie:FireServer(Player.Character)
				success(string.format("Tripped %s", Player.Name))
			end 
		end
	},

	["kill"] = {
		Callback = function(Mod, Player)
		for _, Player in pairs(returnplayers(Mod, Player)) do 
			if notloaded(Player.Name) or noclient(Player.Name) then continue end
				fireServer("ChangeParent", Player.Character:FindFirstChild("Head"), nil)   
				success(string.format("Killed %s", Player.Name))
			end   
		end
	},

	["explode"] = {
		Callback = function(Mod, Player)
		for _, Player in pairs(returnplayers(Mod, Player)) do 
			if notloaded(Player.Name) or noclient(Player.Name) then continue end
				Workspace.Remote.Detonate:FireServer({["Head"] = Player.Character.Head})
				success(string.format("Exploded %s", Player.Name))
			end   
		end
	},

	["punish"] = {
		Callback = function(Mod, Player)
		for _, Player in pairs(returnplayers(Mod, Player)) do 
			if notloaded(Player.Name) then continue end
				fireServer("ChangeParent", Player.Character, Player)
				success(string.format("Punsihed %s", Player.Name))
			end  
		end
	},

	["unpunish"] = {
		Callback = function(Mod, Player)
		for _, Player in pairs(returnplayers(Mod, Player)) do     
			if Workspace:FindFirstChild(Player.Name) then
					error(string.format("%s is not punished", Player.Name))
					continue
				end
				fireServer("ChangeParent", Player:FindFirstChild(Player.Name), Workspace)
				success(string.format("Unpunsihed %s", Player.Name))
			end  
		end
	},

	["kick"] = {
		Callback = function(Mod, Player)
		for _, Player in pairs(returnplayers(Mod, Player)) do 
			if noclient(Player.Name) then continue end
				kickplayer(Player.Name)
				success(string.format("Kicked %s", Player.Name))
			end   
		end
	},

	["clog"] = {
		Callback = function(Mod, Player)
		for _, Player in pairs(returnplayers(Mod, Player)) do 
			if noclient(Player.Name) then continue end
				fireServer("ChangeValue", Player.playerstats.combat, true)
				Player.TrackCombat:FireServer()
				kickplayer(Player.Name)
				success(string.format("Combat logged %s", Player.Name))
			end
		end
	},

	["kickgroup"] = {
		Callback = function(Mod, Player)
		for _, Player in pairs(returnplayers(Mod, Player)) do 
			if checkgroup(Player.Name) then continue end
				Workspace.Remote.GroupKick:FireServer(Lighting.Groups[getgroup(Player.Name)], Player)
				success(string.format("Kicked %s from his group", Player.Name))
			end
		end
	},

	["joingroup"] = {
		Callback = function(Mod, Player)
		for _, Player in pairs(returnplayers(Mod, Player)) do 
			if checkgroup(Player.Name) then continue end
				Workspace.Remote.GroupInvite:FireServer(Players[Mod], getgroup(Player.Name))
				success(string.format("Sent %s an invite to %s group", Mod, Player.Name))
			end
		end
	},

--vitals 
	["god"] = {
		Callback = function(Mod, Player)
		for _, Player in pairs(returnplayers(Mod, Player)) do 
			for _, v in pairs(Player.Character:GetDescendants()) do     
				if v.Name == "DefenseMultiplier" then 
						fireServer("ChangeParent", v, nil)
					end    
				end
				Workspace.Remote.AddClothing:FireServer("DefenseMultiplier", Player.Character.Humanoid, 0, "","")
				success(string.format("Godded %s",Player.Name))
			end
		end
	},

	["ungod"] = {
		Callback = function(Mod, Player)
		for _, Player in pairs(returnplayers(Mod, Player)) do 
			for _, v in pairs(Player.Character:GetDescendants()) do
				if v.Name == "DefenseMultiplier" then 
						fireServer("ChangeParent", v, nil)
					end    
				end
				success(string.format("Ungodded %s", Player.Name))
			end
		end
	}, 

	["heal"] = {
		Callback = function(Mod, Player)
		for _, Player in pairs(returnplayers(Mod, Player)) do 
				fireServer("Damage", Player.Character:FindFirstChild("Humanoid"), -100)
				success(string.format("Healed %s", Player.Name))
			end   
		end
	},

	["hunger"] = {
		Callback = function(Mod, Player, Value) 
		for _, Player in pairs(returnplayers(Mod, Player)) do 
			if checkargs("Value", tonumber(Value)) then return end	
				fireServer("ChangeValue", Player.playerstats.Hunger, setvalue(Value, -9e9, 9e9, 0))
				success(string.format("Set %s's hunger to %s", Player.Name, Value))
			end
		end
	},

	["thirst"] = {
		Callback = function(Mod, Player, Value) 
		for _, Player in pairs(returnplayers(Mod, Player)) do 
			if checkargs("Value", tonumber(Value)) then return end	
				fireServer("ChangeValue", Player.playerstats.Thirst, setvalue(Value, -9e9, 9e9, 0))
				success(string.format("Set %s's thirst to %s", Player.Name, Value))
			end
		end
	},

	["stamina"] = {
		Callback = function(Mod, Player, Value) 
		for _, Player in pairs(returnplayers(Mod, Player)) do 
			if checkargs("Value", tonumber(Value)) then return end	
				fireServer("ChangeValue", Player.Backpack.GlobalFunctions.Stamina, setvalue(Value, -9e9, 9e9, 0))
				success(string.format("Set %s's stamina to %s", Player.Name, Value))
			end
		end
	},

	["infvitals"] = {
		Callback = function(Mod, Player)
		for _, Player in pairs(returnplayers(Mod, Player)) do 
				fireServer("ChangeValue", Player.playerstats.Thirst, math.huge)
				fireServer("ChangeValue", Player.playerstats.Hunger, math.huge)
				success(string.format("Set %s's vitals to max", Player.Name))
			end
		end
	},

	["novitals"] = {
		Callback = function(Mod, Player)
		for _, Player in pairs(returnplayers(Mod, Player)) do 
				fireServer("ChangeValue", Player.playerstats.Thirst, 0)
				fireServer("ChangeValue", Player.playerstats.Hunger, 0)
				success(string.format("Set %s's vitals to 0", Player.Name))
			end
		end
	},

--stats 
	["pkills"] = {
		Callback = function(Mod, Player, Value) 
		for _, Player in pairs(returnplayers(Mod, Player)) do 
			if checkargs("Value", tonumber(Value)) then return end	
				fireServer("ChangeValue", Player.playerstats.PlayerKill.Bandit, setvalue(Value, -9e9, 9e9, 0))
				success(string.format("Set %s players killed to %s", Player.Name, Value))
			end
		end
	},

	["days"] = {
		Callback = function(Mod, Player, Value) 
		for _, Player in pairs(returnplayers(Mod, Player)) do 
			if checkargs("Value", tonumber(Value)) then return end	
				fireServer("ChangeValue", Player.playerstats.Days, setvalue(Value, -9e9, 9e9, 0))
				success(string.format("Set %s's days survived to %s", Player.Name, Value))
			end
		end
	},

	["zkills"] = {
		Callback = function(Mod, Player, Value) 
		for _, Player in pairs(returnplayers(Mod, Player)) do 
			if checkargs("Value", tonumber(Value)) then return end	
				fireServer("ChangeValue", Player.playerstats.ZombieKill.Military, setvalue(Value, -9e9, 9e9, 0))
				success(string.format("Set %s's zombies killed to %s", Player.Name, Value))
			end
		end
	},

--weapons 
	["pump"] = {
		Callback = function(Mod, Player, Weapon)
		for _, Player in pairs(returnplayers(Mod, Player)) do 
			Weapon = GetWeapon(Weapon)
			if checkargs("Weapon", Weapon) then return end
			if checkweapon(Weapon, Player.Name) then continue end
				fireServer("ChangeValue", Player.Backpack[Weapon].Stats.Action, 4)
				fireServer("ChangeValue", Player.Backpack[Weapon].Stats.Action.Original, 4)
				success(string.format("Set %s's %s's firemode to pump action", Player.Name, Weapon))
			end 
		end
	},

	["shotgun"] = {
		Callback = function(Mod, Player, Weapon)
		for _, Player in pairs(returnplayers(Mod, Player)) do 
			Weapon = GetWeapon(Weapon)
			if checkargs("Weapon", Weapon) then return end
			if checkweapon(Weapon, Player.Name) then continue end
				fireServer("ChangeValue", Player.Backpack[Weapon].Stats.Action, 5)
				fireServer("ChangeValue", Player.Backpack[Weapon].Stats.Action.Original, 5)
				success(string.format("Set %s's %s's firemode to semi-auto shotgun", Player.Name, Weapon))
			end 
		end
	},

	["bolt"] = {
		Callback = function(Mod, Player, Weapon)
		for _, Player in pairs(returnplayers(Mod, Player)) do 
			Weapon = GetWeapon(Weapon)
			if checkargs("Weapon", Weapon) then return end
			if checkweapon(Weapon, Player.Name) then continue end
				fireServer("ChangeValue", Player.Backpack[Weapon].Stats.Action, 2)
				fireServer("ChangeValue", Player.Backpack[Weapon].Stats.Action.Original, 2)
				success(string.format("Set %s's %s's firemode to bolt action", Player.Name, Weapon))
			end 
		end
	},

	["recoil"] = {
		Callback = function(Mod, Player, Weapon, Value)
		for _, Player in pairs(returnplayers(Mod, Player)) do 
			Weapon = GetWeapon(Weapon)
			if checkargs("Weapon", Weapon) or checkargs("Value", tonumber(Value)) then return end
			if checkweapon(Weapon, Player.Name) then continue end
				fireServer("ChangeValue", Player.Backpack[Weapon].Stats.Recoil, getrenv()._G.Obfuscate(setvalue(Value, 1, 99999999999999, .5)))
				success(string.format("Set %s's %s's recoil to %s", Player.Name, Weapon, Value))
			end  
		end
	},

	["norecoil"] = {
		Callback = function(Mod, Player, Weapon)
		for _, Player in pairs(returnplayers(Mod, Player)) do 
			Weapon = GetWeapon(Weapon)
			if checkargs("Weapon", Weapon) then return end
			if checkweapon(Weapon, Player.Name) then continue end
				fireServer("ChangeValue", Player.Backpack[Weapon].Stats.Recoil, getrenv()._G.Obfuscate(1))
				success(string.format("Set %s's %s's recoil To 1", Player.Name, Weapon))
			end  
		end
	},

	["spread"] = {
		Callback = function(Mod, Player, Weapon, Value)
		for _, Player in pairs(returnplayers(Mod, Player)) do 
			Weapon = GetWeapon(Weapon)
			if checkargs("Weapon", Weapon) or checkargs("Value", tonumber(Value)) then return end
			if checkweapon(Weapon, Player.Name) then continue end
				spawn(function()
					fireServer("ChangeParent", Player:FindFirstChild("Shooter"), nil)
					fireServer("ChangeParent", Player.Backpack[Weapon].Shooter, Player)
					Player:WaitForChild("Shooter")
					fireServer("ChangeValue", Player.Backpack[Weapon].Stats.Accuracy, getrenv()._G.Obfuscate(setvalue(Value, 1, 99999999999999, .5)))
					wait(.25)
					fireServer("ChangeParent",Player.Shooter,Player.Backpack[Weapon])
				end)
				success(string.format("Set %s's %s's spread to %s", Player.Name, Weapon, Value))
			end 
		end
	},

	["nospread"] = {
		Callback = function(Mod, Player, Weapon)
		for _, Player in pairs(returnplayers(Mod, Player)) do 
			Weapon = GetWeapon(Weapon)
			if checkargs("Weapon", Weapon) then return end
			if checkweapon(Weapon, Player.Name) then continue end
				spawn(function()
					fireServer("ChangeParent", Player:FindFirstChild("Shooter"), nil)
					fireServer("ChangeParent", Player.Backpack[Weapon].Shooter, Player)
					Player:WaitForChild("Shooter")
					fireServer("ChangeValue", Player.Backpack[Weapon].Stats.Accuracy, getrenv()._G.Obfuscate(1))
					wait(.25)
					fireServer("ChangeParent", Player.Shooter,Player.Backpack[Weapon])
				end)
				success(string.format("Set %s's %s's spread to 1", Player.Name, Weapon))
			end 
		end
	},

	["firerate"] = {
		Callback = function(Mod, Player, Weapon, Value)
		for _, Player in pairs(returnplayers(Mod, Player)) do 
			Weapon = GetWeapon(Weapon)
			if checkargs("Weapon", Weapon) or checkargs("Value", tonumber(Value)) then return end
			if checkweapon(Weapon, Player.Name) then continue end
				spawn(function()
					fireServer("ChangeParent", Player:FindFirstChild("Shooter"), nil)
					fireServer("ChangeValue", Player.Backpack[Weapon].Stats.Action, 1)
					fireServer("ChangeValue", Player.Backpack[Weapon].Stats.Action.Original, 3)
					fireServer("ChangeParent", Player.Backpack[Weapon].Shooter, Player)
					Player:WaitForChild("Shooter")
					if not Player.Backpack[Weapon].Stats.Action:FindFirstChild("Rate") then
						Workspace.Remote.AddClothing:FireServer("Rate", Player.Backpack[Weapon].Stats.Action, "","","")
					end   
					Player.Backpack[Weapon].Stats.Action:WaitForChild("Rate")
					fireServer("ChangeValue", Player.Backpack[Weapon].Stats.Action.Rate, getrenv()._G.Obfuscate(setvalue(Value, 1, 99999999999999, .5)))
					wait(.25)
					fireServer("ChangeParent", Player.Shooter, Player.Backpack[Weapon])
				end)
				success(string.format("Set %s's %s's firerate to %s", Player.Name, Weapon, Value))
			end 
		end
	},

	["ammo"] = {
		Callback = function(Mod, Player, Value)
		for _, Player in pairs(returnplayers(Mod, Player)) do 
			if checkargs("Value", tonumber(Value)) then return end	
				if notspawned(Player.Name) then continue end
				for _, v in pairs(Player.playerstats.slots:GetChildren()) do
					if v:FindFirstChild("ObjectID") then
						if v:FindFirstChild("ObjectID"):FindFirstChild("Clip") then 
							fireServer("ChangeValue", v.ObjectID.Clip.MaxClip, Value)
							fireServer("ChangeValue", v.ObjectID.Clip, getrenv()._G.Obfuscate(setvalue(Value, 1, 99999999999999, .5)))
						end
					end
				end
				success(string.format("Set %s's weapon ammo to %s", Player.Name, Value))
			end  
		end
	},

	["infammo"] = {
		Callback = function(Mod, Player)
		for _, Player in pairs(returnplayers(Mod, Player)) do 
			if notspawned(Player.Name) then continue end
				for _, v in pairs(Player.playerstats.slots:GetChildren()) do
					if v:FindFirstChild("ObjectID") then
						if v:FindFirstChild("ObjectID"):FindFirstChild("Clip") then 
							fireServer("ChangeValue", v.ObjectID.Clip.MaxClip, 99999999999999)
							fireServer("ChangeValue", v.ObjectID.Clip, getrenv()._G.Obfuscate(99999999999999))
						end
					end
				end
				success(string.format("Set %s's ammo to 99999999999999", Player.Name))
			end  
		end
	},

	["add"] = {
		Callback = function(Mod, Player, Weapon, Attachment)
			for _, Player in pairs(returnplayers(Mod, Player)) do 
				Weapon = GetWeapon(Weapon)
				Attachment = GetAttachments(Attachment)
				if checkargs("Weapon", Weapon) or checkargs("Attachment", Attachment) then return end
				if checkweapon(Weapon, Player.Name) then continue end
				spawn(function()
					local WeaponType = "primary"
					if Player.Backpack[Weapon]:FindFirstChild("secondarymarker") then
						WeaponType = "secondary"
					end
					if not Player.playerstats.attachments[WeaponType][AttachmentList[Attachment][1]]:FindFirstChild("ObjectID") then
						Workspace.Remote.AddClothing:FireServer("ObjectID", Player.playerstats.attachments[WeaponType][AttachmentList[Attachment][1]], "","","")
					end
					Player.playerstats.attachments[WeaponType][AttachmentList[Attachment][1]]:WaitForChild("ObjectID")
					fireServer("ChangeValue", Player.playerstats.attachments[WeaponType][AttachmentList[Attachment][1]],1)
					fireServer("ChangeValue", Player.playerstats.attachments[WeaponType][AttachmentList[Attachment][1]].ObjectID, getrenv()._G.Obfuscate((AttachmentList[Attachment][2])))
					Workspace.Remote.AddClothing:FireServer("anything lol", Player.playerstats.attachments[WeaponType][AttachmentList[Attachment][1]], "","","")
					fireServer("ChangeParent", Player.playerstats.attachments[WeaponType][AttachmentList[Attachment][1]]:WaitForChild("anything lol"), nil)
				end)
				success(string.format("Added a %s on %s's %s", Attachment, Player.Name, Weapon))
			end
		end
	},

--vehicles

	["vspeed"] = {
		Callback = function(Mod, Vehicle, Value)
		for _, Vehicle in pairs(returnvehicles(Mod, Vehicle)) do 
			if checkargs("Value", tonumber(Value)) then return end	
				fireServer("ChangeValue", Vehicle.Stats.MaxSpeed, Value)
				fireServer("ChangeValue", Vehicle.Stats.MaxSpeed.Offroad, Value)
				success(string.format("Set %s speed to %s", Vehicle.Name, Value))
			end  
		end
	},

	["vfix"] = {
		Callback = function(Mod,Vehicle)
		for _, Vehicle in pairs(returnvehicles(Mod, Vehicle)) do 
				repair(Vehicle, true, 350, 9999999)
				success(string.format("Repaired %s", Vehicle.Name))
			end  
		end
	},

	["vgod"] = {
		Callback = function(Mod, Vehicle)
		for _, Vehicle in pairs(returnvehicles(Mod, Vehicle)) do 
				repair(Vehicle, false, 133742069, 9999999)
				success(string.format("Godded %s", Vehicle.Name))
			end  
		end
	},

	["vungod"] = {
		Callback = function(Mod, Vehicle)
		for _, Vehicle in pairs(returnvehicles(Mod, Vehicle)) do 
				repair(Vehicle, false, 350, 9999999)
				success(string.format("Ungodded %s", Vehicle.Name))
			end  
		end
	},

	["vclone"] = {
		Callback = function(Mod, Player, Vehicle, Value)
		for _, Player in pairs(returnplayers(Mod, Player)) do 
			local Vehicle = returnvehicles(Mod, Vehicle)[1]
			if checkargs("Value", tonumber(Value)) then return end
				spawn(function()
					for i = 1, Value do 
						Clone(Player, Vehicle, Workspace.Vehicles, Vector3.new(0, 15, 0))
					end
				end)
				success(string.format("Cloned %s %ss to %s", Value, Vehicle.Name, Player.Name))
			end
		end
	},

	["vtp"] = {
		Callback = function(Mod, Player, Vehicle)
		for _, Player in pairs(returnplayers(Mod, Player)) do
		local Vehicle = returnvehicles(Mod, Vehicle)[1]
			if Vehicle == nil then return end
				teleport(Player.Name, Vehicle.Essentials.Base.CFrame + Vector3.new(0, 10, 0))
				success(string.format("Teleported %s to %s", Player.Name, Vehicle.Name))
			end
		end
	},

	["vbring"] = {
		Callback = function(Mod, Vehicle, Player)
		for _, Vehicle in pairs(returnvehicles(Mod, Vehicle)) do 	
		local Player = returnplayers(Mod, Player)[1] 
			if Player == nil then return end
				spawn(function()
					Workspace.Remote.AddClothing:FireServer("IsBuildingMaterial", Vehicle.Essentials.Base, "","","")
					Vehicle.Essentials.Base:WaitForChild("IsBuildingMaterial")
					Workspace.Remote.ReplicatePart:FireServer(Vehicle.Essentials.Base, Player.Character.HumanoidRootPart.CFrame + Vector3.new(math.random(10, 20), 4, math.random(10, 20)))
					wait(1)
					fireServer("ChangeParent", Vehicle.Essentials.Base:FindFirstChild("IsBuildingMaterial"), nil)
				end)
				success(string.format("Brought %s to %s", Vehicle.Name, Player.Name))
			end
		end
	},

	["vexplode"] = {
		Callback = function(Mod, Vehicle)
		for _, Vehicle in pairs(returnvehicles(Mod, Vehicle)) do 
				fireServer("ChangeValue", Vehicle.Stats.Engine, 0)
				success(string.format("Exploded %s", Vehicle.Name))
			end
		end  
	},

	["vunweld"] = {
		Callback = function(Mod, Vehicle)
			for _, Vehicle in pairs(returnvehicles(Mod, Vehicle)) do 
				spawn(function()
					for _, v in pairs(Vehicle:GetDescendants()) do
						if v.Name == "Weld" then 
							fireServer("ChangeParent", v, nil)
						end
					end   
				end)
				success(string.format("Removed %s's welds", Vehicle.Name))
			end  
		end
	},

	["vdelete"] = {
		Callback = function(Mod, Vehicle)
		for _, Vehicle in pairs(returnvehicles(Mod, Vehicle)) do 
				fireServer("ChangeParent", Vehicle, nil)
				success(string.format("Deleted %s", Vehicle.Name))
			end  
		end
	},

	["vcolor"] = {
		Callback = function(Mod, Vehicle, Color)
		for _, Vehicle in pairs(returnvehicles(Mod, Vehicle)) do 
			if checkargs("Color code", tonumber(Color)) then return end
				for _, v in pairs(Vehicle:GetDescendants()) do
					if Vehicle.Stats.Armor.Value > 0 then 
						if v.Name == "Special" or v.Name == "Color" or v.Name == "White" then 
							colormodel(v, setvalue(Color, 1, 65, .5), 2)
						end
					elseif v.Name == "Special" or v.Name == "Color" or v.Name == "White" then
						colormodel(v, setvalue(Color, 1, 65, .5), 1)
					end    
					if v.Name ~= "PoliceCar" and v.Name == "ArmorSkirt" then
						colormodel(v, setvalue(Color, 1, 65, .5), 2)
					end
				end
				success(string.format("Set %s's color code to %s", Vehicle.Name, Color))
			end  
		end
	},

	["vmat"] = {
		Callback = function(Mod, Vehicle, Material, Value)
		for _, Vehicle in pairs(returnvehicles(Mod, Vehicle)) do 
		Material = GetMaterials(Material)
		if checkargs("Material", Material) or checkargs("Transparency", tonumber(Value)) then return end	
				if Vehicle.Essentials.Color:FindFirstChild("ArmorSkirt") then
					fireServer("ChangeParent", Vehicle.Essentials.Color:FindFirstChild("ArmorSkirt"), Vehicle)
					fireServer("VehichleLightsSet", Vehicle.Essentials.Color:FindFirstChild("ArmorSkirt"), Material, 1, 0)
				end   
				for _, v in pairs(Vehicle:GetDescendants()) do
					if v.Name == "Special" or v.Name == "Color" or v.Name == "Black" or v.Name == "White" or v.Name == "LMWheel" or v.Name == "LBWheel" or v.Name == "Black" then
						fireServer("VehichleLightsSet", v, Material, setvalue(Value, 0, 1))
					end
					if v.Name == "LMWheel" or v.Name == "LBWheel" or v.Name == "Black" or v.Name == "LFWheel" or v.Name == "RFWheel" or v.Name == "RMWheel" or v.Name == "RBWheel" then 
						fireServer("VehichleLightsSet", v, Material, setvalue(Value, 0, 0.99999))
					end
				end
				Vehicle:WaitForChild("ArmorSkirt")
				fireServer("ChangeParent", Vehicle:FindFirstChild("ArmorSkirt"), Vehicle.Essentials.Color)
				success(string.format("Set %s's material to %s and transparency to %s", Vehicle.Name, Material, Value))
			end 
		end 
	},
	
--apperance 
	["shirt"] = {
		Callback = function(Mod ,Player, Value)
			local Playerlist = returnplayers(Mod,Player)
			for _, Player in pairs(Playerlist) do 
				if checkargs("ID", tonumber(Value)) then return end	
				setoutfit(Player.Name, "Shirt", Value)
				success(string.format("Set %s's shirt to %s", Player.Name, Value))
			end    
		end
	},

	["pants"] = {
		Callback = function(Mod ,Player, Value)
			local Playerlist = returnplayers(Mod,Player)
			for _, Player in pairs(Playerlist) do 
				if checkargs("ID", tonumber(Value)) then return end	
				setoutfit(Player.Name, "Pants", Value)
				success(string.format("Set %s's pants to %s", Player.Name, Value))
			end    
		end
	},

	["color"] = {
		Callback = function(Mod, Player, Color)
			for _, Player in pairs(returnplayers(Mod, Player)) do 
				if checkargs("Color code", tonumber(Color)) then return end	
				if notloaded(Player.Name) then continue end
				colormodel(Player.Character, setvalue(Color, 1, 65, .5), 1)
				success(string.format("Set %s's color code to %s", Player.Name, Color)) 
			end
		end
	},

	["invis"] = {
		Callback = function(Mod, Player, Value) 
			for _, Player in pairs(returnplayers(Mod, Player)) do 
				if checkargs("Transparency", tonumber(Value)) then return end	
				if notloaded(Player.Name) then continue end
				fireServer("VehichleLightsSet", Player.Character, "Plastic", setvalue(Value, 0, 1))
				success(string.format("Set %s's transparency to %s", Player.Name, Value))
			end
		end
	},

	["vest"] = {
		Callback = function(Mod, Player, Color, Texture)
			for _, Player in pairs(returnplayers(Mod, Player)) do 
			if checkargs("Color code", tonumber(Color)) or checkargs("Texture code", tonumber(Texture)) then return end	
				local VestObject
				for _, v in pairs(Lighting.PlayerVests:GetChildren()) do
  					if Player.Character:FindFirstChild(v.Name) then
    					VestObject = Player.Character[v.Name]
  					end    
				end
				if not VestObject then 
 					error(string.format("%s Does Not Have A Vest", Player.Name))
					continue
				end   
				colormodel(VestObject, setvalue(Color, 1, 65, .5), setvalue(Texture, 1, 12, .5))
				success(string.format("Set %s's vest's color code to %s and texture code %s", Player.Name, Color, Texture))
			end    
		end
	},

	["vestmat"] = {
		Callback = function(Mod, Player, Material, Value)
			for _, Player in pairs(returnplayers(Mod, Player)) do 
				Material = GetMaterials(Material)
				if checkargs("Material", Material) or checkargs("Transparency", tonumber(Value)) then return end	
				local VestObject
				for _, v in pairs(Lighting.PlayerVests:GetChildren()) do
  					if Player.Character:FindFirstChild(v.Name) then
    					VestObject = Player.Character[v.Name]
  					end    
				end
				if not VestObject then 
 					error(string.format("%s Does Not Have A Vest", Player.Name))
					continue
				end   
				fireServer("ChangeParent", VestObject:FindFirstChild("thisisarmor"), nil)
				fireServer("ChangeParent", VestObject:FindFirstChild("thisisarmor"), Player)
				Player:WaitForChild("thisisarmor")
				fireServer("VehichleLightsSet", VestObject, Material, setvalue(Value, 0, 1))
				fireServer("ChangeParent", Player:FindFirstChild("thisisarmor"), VestObject)
				success(string.format("Set %s's vest's material to %s and transparency to %s", Player.Name, Material, Value))
			end    
		end
	},

	["bag"] = {
		Callback = function(Mod, Player, Color, Texture)
			for _, Player in pairs(returnplayers(Mod, Player)) do 
				if checkargs("Color code", tonumber(Color)) or checkargs("Texture code", tonumber(Texture)) then return end	
				local BackPackObject
				for _, v in pairs(Lighting.Backpacks:GetChildren()) do
  					if Player.Character:FindFirstChild(v.Name) then
    					BackPackObject = Player.Character[v.Name]
  					end    
				end
				if not BackPackObject then 
 					error(string.format("%s Does Not Have A Backpack", Player.Name))
					continue
				end   
				colormodel(BackPackObject, setvalue(Color, 1, 65, .5), setvalue(Texture, 1, 12, .5))
				success(string.format("Set %s's backpack's color code to %s and texture code %s", Player.Name, Color, Texture))
			end  
		end 
	},

	["bagmat"] = {
		Callback = function(Mod, Player, Material, Value)
			for _, Player in pairs(returnplayers(Mod, Player)) do 
			Material = GetMaterials(Material)
			if checkargs("Material", Material) or checkargs("Transparency", tonumber(Value)) then return end	
				local BackPackObject
				for _, v in pairs(Lighting.Backpacks:GetChildren()) do
  					if Player.Character:FindFirstChild(v.Name) then
    					BackPackObject = Player.Character[v.Name]
  					end    
				end
				if not BackPackObject then 
 					error(string.format("%s does not have a backpack", Player.Name))
					continue
				end   
				fireServer("ChangeParent", Player:FindFirstChild("thisisbackpack"), nil)
				fireServer("ChangeParent", Player:FindFirstChild("WeldScript"), nil)
				fireServer("ChangeParent", BackPackObject:FindFirstChild("thisisbackpack"), Player)
				fireServer("ChangeParent", BackPackObject:FindFirstChild("WeldScript"), Player)
				Player:WaitForChild("thisisbackpack")
				Player:WaitForChild("WeldScript")
				fireServer("VehichleLightsSet", BackPackObject, Material, setvalue(Value, 0, 1))
				fireServer("ChangeParent", Player:FindFirstChild("thisisbackpack"), BackPackObject)
				fireServer("ChangeParent", Player:FindFirstChild("WeldScript"), BackPackObject)
				success(string.format("Set %s's backpack's material to %s and transparency to %s", Player.Name, Material, Value))
			end    
		end
	},

--server
["map"] = {
	Callback = function(Mod, Color, Texture)
		if checkargs("Color code", tonumber(Color)) or checkargs("Texture code", tonumber(Texture)) then return end	
		if game.PlaceId == 237590761 or game.PlaceId == 302647266 or game.PlaceId == 1228676522 or game.PlaceId == 1228677045 then 
			error(string.format("coloring and texturing is disabled On", Mapname))
			return
		elseif not workspace["Anchored Objects"] then 
			error("Anchored Objects is nil")
			return
		end
		if game.PlaceId == 237590657 or game.PlaceId == 1228674372 then 
    		colormodel(Workspace["Anchored Objects"].Plates, setvalue(Color, 1, 65, .5), setvalue(Texture, 1, 12, .5))
    		for _, v in pairs(Workspace["Anchored Objects"].Plates.Hills:GetDescendants()) do
    			if v:IsA("Model") then
    				colormodel(v, setvalue(Color, 1, 65, .5), setvalue(Texture, 1, 12, .5))
    			end
    		end
		elseif game.PlaceId == 290815963 or game.PlaceId == 1228677761 then 
			colormodel(Workspace["Anchored Objects"].Plates.Plates, setvalue(Color, 1, 65, .5), setvalue(Texture, 1, 12, .5))
			for _, v in pairs(Workspace["Anchored Objects"].Plates.Hills:GetDescendants()) do
				if v:IsA("Model") then
					colormodel(v, setvalue(Color, 1, 65, .5), setvalue(Texture, 1, 12, .5))
				end
			end
		end
		success(string.format("Set %s's color code to %s and texture code %s", Mapname, Color, Texture))
	end
},

--etc (random) 
	["mod"] = {
		Callback = function(Mod, Player)
		for _, Player in pairs(returnplayers(Mod, Player)) do 
			if noclient(Player.Name) then continue end
				if table.find(Moderators, Player.Name) then 
					error(string.format("%s is already a moderator", Player.Name))
					continue 
				end
				table.insert(Moderators, Player.Name)
				success(string.format("Granted moderation to %s", Player.Name))
			end
		end
	},

	["unmod"] = {
		Callback = function(Mod, Player)
		for _, Player in pairs(returnplayers(Mod, Player)) do 
			if noclient(Player.Name) then continue end
				if not table.find(Moderators, Player.Name) then 
					error(string.format("%s is not a moderator", Player.Name))
					continue 
				end
				table.remove(Moderators, table.find(Moderators, Player.Name))
				success(string.format("Removed %s's moderation", Player.Name))
			end
		end
	},
}

ChatHookEvent =
	Workspace.Remote.Chat.OnClientEvent:connect(function(...)
	local Args = {...}
	local Player = Args[1]["Speaker"]
	local Message = Args[1]["Message"]
	if checkpermission(Player.Name) or Player == Client then
		if string.sub(Message, 1, #Prefix) == Prefix then
			local Formatted = string.sub(Message, 1 + #Prefix)
			fireCommand(Formatted, Player.Name)
		end
	end
end)

function fireCommand(Text, Player)
	local Args = GetArgs(Text)
	if not Args or #Args == 0 then return end
	local Command = Args[1]:lower()
	if Command:lower() == "cmds" then 
		for i, v in pairs(CommandDictionary) do 
			success(i)
		end
		return
	end
	if not CommandDictionary[Command] then
		error("\"" .. Command .. "\"" .. " is not a valid command")
		return    
	end   
	if Nonmods[Command] and table.find(Moderators, Player) then
		error("Thats a client command only")
		return
	end
	CommandDictionary[Command].Callback(Player, select(2, table.unpack(Args)))
end

Type.FocusLost:Connect(function(EnterPressed)
	if EnterPressed and Type.Text ~= nil and Type.Text ~= "" then
		fireCommand(Type.Text, Client.Name)
		Type.Text = "" 
	end
end)

local IsDragging, DragInput, DragStart, StartPos
Drag.InputBegan:Connect(function(input)
	if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
		IsDragging = true
		DragStart = input.Position
		StartPos = Main.Position

		input.Changed:Connect(function()
			if input.UserInputState == Enum.UserInputState.End then IsDragging = false end
		end)
	end
end)
Drag.InputChanged:Connect(function(input)
	if input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch then DragInput = input end
end)
UserInputService.InputChanged:Connect(function(input)
	if input == DragInput and IsDragging then 
		local Delta = input.Position - DragStart
		Main.Position = UDim2.new(StartPos.X.Scale, StartPos.X.Offset + Delta.X, StartPos.Y.Scale, StartPos.Y.Offset + Delta.Y)
	end
end)

Mouse.KeyUp:connect(function(Key)
	if tostring(Key) == "`" then
		Console.Visible = true
		Type:CaptureFocus()
	end
end)

UserInputService.InputBegan:Connect(function(Key)
	if Key.KeyCode == Enum.KeyCode.RightShift then
		Main.Visible = not Main.Visible
	end
end)


